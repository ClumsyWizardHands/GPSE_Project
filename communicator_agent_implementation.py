"""
Communicator Agent Implementation with FileWriterTool and StrategyDBUpdateTool
"""
import os
import json
from datetime import datetime
from typing import Dict, List, Any
from pathlib import Path

from crewai import Agent
from crewai.tools import BaseTool
from langchain_openai import ChatOpenAI
import logging

from db_manager import ChromaDBManager
from gpse_tools import get_date_code

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FileWriterTool(BaseTool):
    """
    Tool for writing strategic analysis documents to disk with proper formatting and structure.
    """
    name: str = "File Writer Tool"
    description: str = "Write formatted strategic analysis documents to the strategy_analyses directory"
    
    def _run(self, content: str, filename: str = None, metadata: Dict[str, Any] = None) -> str:
        """
        Write strategic analysis content to a file.
        
        Args:
            content: The formatted strategic analysis content
            filename: Optional custom filename (defaults to GGSM-{date}-DailyAnalysis.md)
            metadata: Optional metadata to include in file header
        
        Returns:
            Success message with file path
        """
        try:
            # Ensure strategy_analyses directory exists
            output_dir = Path("strategy_analyses")
            output_dir.mkdir(exist_ok=True)
            
            # Generate filename if not provided
            if not filename:
                date_code = get_date_code()
                filename = f"GGSM-{date_code}-DailyAnalysis.md"
            
            # Add .md extension if not present
            if not filename.endswith('.md'):
                filename += '.md'
            
            # Full file path
            file_path = output_dir / filename
            
            # Format content with proper GPSE structure if not already formatted
            if not content.startswith("---"):
                date_str = datetime.now().strftime("%B %d, %Y")
                date_code = get_date_code()
                entry_id = filename.replace('.md', '')
                
                formatted_content = f"""---
## Geopolitical Grand Strategy Monitor
**Strategic Synthesis Entry**
**Date:** {date_str}
**Entry ID:** {entry_id}
**Analysis Type:** Comprehensive Daily Assessment
**Classification:** Strategic Intelligence

{content}

### Metadata
**Generated by:** GPSE Communicator Agent
**Processing Time:** {datetime.now().strftime("%H:%M:%S EST")}
**Sources Analyzed:** {metadata.get('sources_count', 'Multiple') if metadata else 'Multiple'}
**Historical Context References:** {metadata.get('historical_refs', 'Integrated') if metadata else 'Integrated'}
---"""
                content = formatted_content
            
            # Write to file
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"Successfully wrote strategic analysis to: {file_path}")
            
            # Log metadata if provided
            if metadata:
                metadata_path = file_path.with_suffix('.json')
                with open(metadata_path, 'w', encoding='utf-8') as f:
                    json.dump(metadata, f, indent=2)
                logger.info(f"Metadata saved to: {metadata_path}")
            
            return f"Successfully saved strategic analysis to {file_path}"
            
        except Exception as e:
            error_msg = f"Failed to write file: {str(e)}"
            logger.error(error_msg)
            return error_msg

class StrategyDBUpdateTool(BaseTool):
    """
    Tool for updating the ChromaDB with new strategic analysis documents.
    Processes documents into chunks and stores them with embeddings.
    """
    name: str = "Strategy Database Update Tool"
    description: str = "Update the ChromaDB historical strategy knowledge base with new analysis documents"
    
    def __init__(self):
        super().__init__()
        self._db_manager = None
    
    @property
    def db_manager(self):
        """Lazy load database manager"""
        if self._db_manager is None:
            self._db_manager = ChromaDBManager()
        return self._db_manager
    
    def _run(self, document_path: str, custom_metadata: Dict[str, Any] = None) -> str:
        """
        Add a strategic analysis document to ChromaDB.
        
        Args:
            document_path: Path to the markdown document to process
            custom_metadata: Optional additional metadata to store
        
        Returns:
            Success message with number of chunks added
        """
        try:
            # Validate file exists
            if not os.path.exists(document_path):
                return f"Error: Document not found at {document_path}"
            
            # Process the document
            logger.info(f"Processing document for ChromaDB: {document_path}")
            
            # Extract base metadata from filename
            filename = os.path.basename(document_path)
            file_parts = filename.replace('.md', '').split('-')
            
            base_metadata = {
                'filename': filename,
                'processed_date': datetime.now().isoformat(),
                'document_type': 'strategic_analysis'
            }
            
            # Merge with custom metadata if provided
            if custom_metadata:
                base_metadata.update(custom_metadata)
            
            # Use the db_manager's process_strategy_document method
            chunks_added = self.db_manager.process_strategy_document(
                document_path
            )
            
            # Log collection stats
            collection_size = len(self.db_manager.collection.get()['ids'])
            
            success_msg = (
                f"Successfully updated strategy database:\n"
                f"- Document: {filename}\n"
                f"- Chunks added: {chunks_added}\n"
                f"- Total documents in database: {collection_size}\n"
                f"- Metadata: {json.dumps(base_metadata, indent=2)}"
            )
            
            logger.info(success_msg)
            return success_msg
            
        except Exception as e:
            error_msg = f"Failed to update strategy database: {str(e)}"
            logger.error(error_msg)
            return error_msg

def create_communicator_agent(llm_instance=None) -> Agent:
    """
    Create the Communicator agent with FileWriterTool and StrategyDBUpdateTool.
    
    Args:
        llm_instance: Optional LLM instance (defaults to OpenAI o3)
    
    Returns:
        Configured Communicator agent
    """
    # Use provided LLM or create default OpenAI o3 instance
    if llm_instance is None:
        openai_key = os.getenv('OPENAI_API_KEY')
        if not openai_key:
            raise ValueError("OpenAI API key required for communicator agent")
        
        llm_instance = ChatOpenAI(
            model="o1-preview",  # Using o1-preview instead of o3 which doesn't exist
            temperature=0.3,
            api_key=openai_key
        )
    
    # Create tools
    file_writer_tool = FileWriterTool()
    strategy_db_tool = StrategyDBUpdateTool()
    
    # Create agent
    communicator = Agent(
        role="Strategic Communications Officer and Archivist",
        goal=(
            "Format the grand strategy analysis into a document, save it, "
            "and update the historical strategy knowledge base."
        ),
        backstory=(
            "Responsible for clear dissemination and meticulous archiving. "
            "You are a master of strategic communications with decades of experience "
            "in transforming complex geopolitical analyses into actionable intelligence "
            "documents. Your expertise spans both the art of clear communication and "
            "the science of knowledge management. You understand that every analysis "
            "must be preserved with precision, as today's insights become tomorrow's "
            "strategic context. You take pride in maintaining the integrity and "
            "accessibility of the strategic knowledge base, ensuring that every piece "
            "of intelligence is properly formatted, saved, and indexed for future "
            "reference. Your verbose outputs ensure comprehensive documentation that "
            "captures all nuances and strategic implications for future analysts."
        ),
        tools=[file_writer_tool, strategy_db_tool],
        llm=llm_instance,
        max_iter=3,
        allow_delegation=False,
        verbose=True
    )
    
    return communicator

# Example integration function showing how to add communicator to existing crew
def integrate_communicator_into_crew(gpse_crew_instance):
    """
    Example function showing how to integrate the communicator agent into an existing GPSECrew.
    
    This would be added to the GPSECrew class in gpse_crew_with_geo_analyst.py
    """
    # In the _create_agents method, add:
    # self.communicator = create_communicator_agent(self.efficient_llm)
    
    # In the _create_tasks method, add a communicator task:
    # self.communicator_task = Task(
    #     description=(
    #         "Take the comprehensive strategic analyses from all previous agents and:\n"
    #         "1. Format them into the standard GPSE document structure\n"
    #         "2. Ensure all metadata tags are properly included\n"
    #         "3. Save the document to the strategy_analyses directory\n"
    #         "4. Update the ChromaDB with the new analysis for future reference\n"
    #         "5. Provide a detailed summary of what was archived"
    #     ),
    #     expected_output=(
    #         "A confirmation report including:\n"
    #         "- The saved document filename and path\n"
    #         "- Number of chunks added to ChromaDB\n"
    #         "- Key topics and actors covered in the analysis\n"
    #         "- Any issues encountered during archival\n"
    #         "- Recommendations for future analyses"
    #     ),
    #     agent=self.communicator,
    #     context=[self.analyze_strategy_task, self.geo_analyst_task]
    # )
    
    # In the create_crew method, add communicator to agents and tasks lists
    pass

# Standalone test function
def test_communicator_agent():
    """Test the communicator agent with sample content"""
    logger.info("Testing Communicator Agent...")
    
    # Create sample content
    sample_content = """
### Executive Summary
Today's analysis reveals heightened tensions in the Indo-Pacific region, 
with particular focus on naval movements near Taiwan Strait. Multiple actors 
are positioning for potential escalation scenarios.

### Primary Observations

#### 1. **China: Naval Force Projection**
* *Observable Behavior:* Increased PLAN destroyer deployments
* *Inferred Strategic Shift:* Testing US response thresholds
* *Emotion Signals/Identity/Resentments:* Historical grievances driving assertiveness

#### 2. **United States: Alliance Reinforcement**
* *Observable Behavior:* Joint exercises with Japan and Australia
* *Inferred Strategic Shift:* Demonstrating unified deterrence
* *Emotion Signals/Identity/Resentments:* Commitment to regional stability

### Scenario Implications
The current trajectory suggests a period of heightened military posturing 
with calculated brinksmanship. De-escalation mechanisms remain active but 
are under strain.
"""
    
    try:
        # Create communicator agent
        communicator = create_communicator_agent()
        
        # Test FileWriterTool
        file_writer = FileWriterTool()
        result = file_writer._run(
            content=sample_content,
            metadata={
                'sources_count': 15,
                'historical_refs': 8,
                'primary_actors': ['China', 'United States', 'Taiwan', 'Japan']
            }
        )
        logger.info(f"FileWriterTool result: {result}")
        
        # Test StrategyDBUpdateTool
        if "Successfully saved" in result:
            # Extract filename from result
            import re
            match = re.search(r'strategy_analyses[/\\](.+\.md)', result)
            if match:
                filename = match.group(1)
                file_path = f"strategy_analyses/{filename}"
                
                db_tool = StrategyDBUpdateTool()
                db_result = db_tool._run(
                    document_path=file_path,
                    custom_metadata={
                        'test_run': True,
                        'agent': 'communicator'
                    }
                )
                logger.info(f"StrategyDBUpdateTool result: {db_result}")
        
        logger.info("Communicator Agent test completed successfully!")
        
    except Exception as e:
        logger.error(f"Test failed: {e}")
        raise

if __name__ == "__main__":
    # Run test
    test_communicator_agent()
